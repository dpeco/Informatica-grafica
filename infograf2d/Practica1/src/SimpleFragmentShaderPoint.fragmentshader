#version 330 core
out vec4 color;
in vec3 normalVector;
in vec3 fragPosition;
in vec2 textureCoords;

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float     shininess;
};  
uniform Material material;

uniform vec3 lightColor;
uniform vec3 lightPosition;
uniform vec3 cubeColor;
uniform vec3 cameraPosition;

uniform sampler2D ourTexture;
void main()
{	

	vec3 normalV = normalize(normalVector);
	
	float ambientStrength = 1.0f;
	float diffStrength = 1.0f;
	float specStrength = 1.0f;
	//amb
	vec3 ambient = ambientStrength * vec3(texture(material.diffuse, textureCoords));
	//diff
	vec3 Ldiff = normalize(lightPosition - fragPosition);
	float diff = max(dot(normalV, Ldiff), 0);
	vec3 diffuse = diffStrength * diff * vec3(texture(material.diffuse, textureCoords));
	//esp
	vec3 espV = normalize(cameraPosition - fragPosition);
	vec3 espR = reflect(-Ldiff, normalV);
	float esp = pow(max(dot(espV, espR), 0), material.shininess);
	vec3 specular = specStrength * esp * vec3(texture(material.specular, textureCoords));
	
	float distance = length(lightPosition - fragPosition);
	vec3 C = vec3(1, 0.3, 0.2);
	float attenuation = 1 / (C.x * 1 + C.y * distance + C.z*pow(distance,2));
	
	vec3 result = (ambient + diffuse + specular)* attenuation;
	color = vec4(result, 1.0f);
	
}
