#version 330 core
out vec4 color;
in vec3 normalVector;
in vec3 fragPosition;

uniform vec3 lightColor;
uniform vec3 lightPosition;
uniform vec3 lightDirection;
uniform vec3 cubeColor;
uniform vec3 cameraPosition;

uniform vec3 focoDir;
uniform float phiInner;
uniform float phiOuter;
uniform sampler2D ourTexture;

void main()
{	

	vec3 lDir = normalize (lightPosition - fragPosition);
	float theta = dot(lDir, normalize(-lightDirection));
	float epsilon   = phiInner - phiOuter;
	float intensity = clamp((theta - phiOuter) / epsilon, 0.0, 1.0);    
	
	if(theta > phiOuter)
	{
	vec3 normalV = normalize(normalVector);
	
	float ambientStrength = 0.1f;
	float diffStrength = 1.0f;
	float specStrength = 1.0f;
	
	vec3 ambient = ambientStrength * cubeColor;
	
	float diff = max(dot(normalV, lDir), 0);
	vec3 diffuse = diffStrength * diff * cubeColor;
	
	vec3 espV = normalize(cameraPosition - fragPosition);
	vec3 espR = reflect(-lDir, normalV);
	float esp = max(dot(espR, espV), 0);
	vec3 specular = specStrength * esp * cubeColor;
	
	float distance = length(lightPosition - fragPosition);
	vec3 C = vec3(1, 1, 1);
	float attenuation = 1 / (C.x * 1 + C.y * distance + C.z*pow(distance,2));
	
	vec3 result = (ambient + diffuse + specular)* attenuation * intensity;
	color = vec4(result, 1.0f);
	}
	else {
	float ambientStrength = 1.0f;
	color = vec4(ambientStrength * cubeColor, 1.0f);
	}
	
}
