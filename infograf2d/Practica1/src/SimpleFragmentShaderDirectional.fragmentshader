#version 330 core
out vec4 color;
in vec3 normalVector;
in vec3 fragPosition;

uniform vec3 lightColor;
uniform vec3 lightPosition;
uniform vec3 lightDirection;
uniform vec3 cubeColor;
uniform vec3 cameraPosition;

uniform sampler2D ourTexture;
void main()
{	

	vec3 normalV = normalize(normalVector);
	
	float ambientStrength = 0.1f;
	float diffStrength = 1.0f;
	float specStrength = 1.0f;
	
    vec3 ambient = ambientStrength * cubeColor;
	
	vec3 Ldiff = normalize(-lightDirection);
	float diff = max(dot(normalV, Ldiff), 0);
	vec3 diffuse = diffStrength * diff * cubeColor;
	
	vec3 espV = normalize(cameraPosition - fragPosition);
	vec3 espR = reflect(-Ldiff, normalV);
	float esp = max(dot(espR, espV), 0);
	vec3 specular = specStrength * esp * cubeColor;
	
    color = vec4(ambient + diffuse + specular, 1.0f);
}
